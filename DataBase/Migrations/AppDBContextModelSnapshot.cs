// <auto-generated />
using System;
using DataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBase.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedDateFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeadLineFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasMaxLength(12)
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("RequestId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Title = "کولر آبی"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Title = "کولر گازی"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Title = "کامپیوتر و سخت افزار"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Title = "وسایل نمایشی"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Title = "وسایل آشپزخانه"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            Title = "مکانیک"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            Title = "ساختمان"
                        });
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RequestId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.ExpertSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ExpertSkills");
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedDateFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeadLineFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int?>("ExpertId")
                        .HasColumnType("int");

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            IsActive = true,
                            Title = "راه اندازی کولر آبی"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            IsActive = true,
                            Title = "تعمیرات کولر آبی"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            IsActive = true,
                            Title = "تعمیرات کولر گازی"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            IsActive = true,
                            Title = "راه اندازی کولر گازی"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            IsActive = true,
                            Title = "تعمیر کیس"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            IsActive = true,
                            Title = "تعمیر مادربرد و بایوس"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            IsActive = true,
                            Title = "تعمیر تلویزیون"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            IsActive = true,
                            Title = "تعمیر مانیتور"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            IsActive = true,
                            Title = "تعمیر یخچال"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            IsActive = true,
                            Title = "تعمیر اجاق و فر"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 5,
                            IsActive = true,
                            Title = "تعمیر ماشین لباسشویی"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 5,
                            IsActive = true,
                            Title = "تعمیر ماشین ظرف‌شویی"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 6,
                            IsActive = true,
                            Title = "تعمیر موتور خودرو"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 6,
                            IsActive = true,
                            Title = "تعمیر موتور سیکلت"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 6,
                            IsActive = true,
                            Title = "تعویض روغن موتور"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 7,
                            IsActive = true,
                            Title = "سیم‌کشی ساختمان"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 7,
                            IsActive = true,
                            Title = "لوله کشی ساختمان"
                        });
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Massage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Massage = "درخواست ایجاد شد و در انتظار پیشنهاد متخصصان"
                        },
                        new
                        {
                            Id = 2,
                            Massage = "پیشنهاد متخصص قبول شد"
                        },
                        new
                        {
                            Id = 3,
                            Massage = "متخصص به محل رسید و شروع به انجام کار است"
                        },
                        new
                        {
                            Id = 4,
                            Massage = "کار متخصص به پایان رسید و در انتظار پرداخت"
                        },
                        new
                        {
                            Id = 5,
                            Massage = "پرداخت انجام شد و درخواست به پایان رسید"
                        });
                });

            modelBuilder.Entity("Domain.Core.User.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutMe")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Address")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AboutMe = "i'm admin",
                            Address = "Tehran marzdaran",
                            AppUserId = 1,
                            Email = "zolghadrisahin@ymail.com",
                            FullName = "شاهین ذوالقدری",
                            Password = "sh19451960",
                            PhoneNumber = "09193017184",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Domain.Core.User.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6271f8a-3dcf-4cca-a52d-32a9be4c30ae",
                            Email = "zolghadrisahin@ymail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZOLGHADRISAHIN@YMAIL.COM",
                            NormalizedUserName = "ZOLGHADRISAHIN@YMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENfZjMGitjpkjyQEK0IR4rhMYpsgtC+LQtNK2tLSYKIPD5ph5beoYOL3nYbgaRL2/Q==",
                            PhoneNumber = "09193017184",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d11bb794-cfdf-4bc8-a673-748e4e3e4557",
                            TwoFactorEnabled = false,
                            UserName = "zolghadrisahin@ymail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e79977e4-6ce1-4a9e-8528-154d5383ce6a",
                            Email = "shakibzolghadri@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SHAKIBZOLGHADRI@GMAIL.COM",
                            NormalizedUserName = "SHAKIBZOLGHADRI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAe83+Fz5rtSNKzI2wxbLtL4kG7CQNa4Th+/NrqVag7bY7wZtuqFB84+22hpMXWWvw==",
                            PhoneNumber = "09106265176",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a6ecc5a-deba-4dd2-bfa7-997ebd45b9c8",
                            TwoFactorEnabled = false,
                            UserName = "shakibzolghadri@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2749eba-bf8b-41f5-a4e3-a4045b8b10c5",
                            Email = "amirfarshad@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AMIRFARSHAD@GMAIL.COM",
                            NormalizedUserName = "AMIRFARSHAD@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ3l7Ffw+YIQjjDZtYbAP6eeIK8mT+4lueTpGSYpVJMzciRYyzaq1IW1us3SznH3tw==",
                            PhoneNumber = "09125254199",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e803e1a6-4760-4925-a0e4-494545c1596e",
                            TwoFactorEnabled = false,
                            UserName = "amirfarshad@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a286fbbd-3430-4e84-aa32-d7a2f2c8af83",
                            Email = "arshiahp@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARSHIAHP@GMAIL.COM",
                            NormalizedUserName = "ARSHIAHP@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKQjCxOl/omvJH6YyIaYPKBhZEQT6gtMJ6NqYWkPk7gAFpUaCLaq5v49nfG8MAdKIg==",
                            PhoneNumber = "09331476832",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c1a1b76b-a7f2-4bf6-944f-7e533c8c5273",
                            TwoFactorEnabled = false,
                            UserName = "arshiahp@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bffa4464-986a-4836-9cb9-146917f05df8",
                            Email = "sadradn@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SADRADN@GMAIL.COM",
                            NormalizedUserName = "SADRADN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENdaokPPdhxj76MP9USWMMAJJ9/TfGbwzduU59mNRFfW/u5stBbPW/LZFJF1uEZaZQ==",
                            PhoneNumber = "09127518144",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ccbc5306-77a1-4a18-ad86-c7ab3292ee5f",
                            TwoFactorEnabled = false,
                            UserName = "sadradn@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fef4dfb0-4a9d-424e-a2e7-ce6dd9a6489d",
                            Email = "soheilj@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SOHEILJ@GMAIL.COM",
                            NormalizedUserName = "SOHEILJ@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC8i4V3hoDn7FDYZjkfq/dyi8ua5a+iQV7VP5beN0Bsgmp9OBM6hvQeR9QbblBbc2A==",
                            PhoneNumber = "09104029183",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dca971cf-35d2-438e-95ea-a01de161b5f5",
                            TwoFactorEnabled = false,
                            UserName = "soheilj@gmail.com"
                        });
                });

            modelBuilder.Entity("Domain.Core.User.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutMe")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Address")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AboutMe = "مشتری هستم",
                            Address = "تهران",
                            AppUserId = 2,
                            Email = "shakibzolghadri@gmail.com",
                            FullName = "شکیب ذوالقدری",
                            Password = "sh19451960",
                            PhoneNumber = "09106265176",
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 3,
                            Email = "amirfarshad@gmail.com",
                            FullName = "امیر فرشاد",
                            Password = "sh19451960",
                            PhoneNumber = "09125254199",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 4,
                            Email = "arshiahp@gmail.com",
                            FullName = "عرشیا حسن‌پور",
                            Password = "sh19451960",
                            PhoneNumber = "09331476832",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Domain.Core.User.Entities.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutMe")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Address")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Experts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 5,
                            Email = "sadradn@gmail.com",
                            FullName = "صدرا دویران",
                            Password = "sh19451960",
                            PhoneNumber = "09127518144",
                            Role = 3
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 6,
                            Email = "soheilj@gmail.com",
                            FullName = "سهیل جیبویی",
                            Password = "sh19451960",
                            PhoneNumber = "09104029183",
                            Role = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Bid", b =>
                {
                    b.HasOne("Domain.Core.User.Entities.Expert", "Expert")
                        .WithMany("Bids")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Core.HomeService.Entities.Request", "Request")
                        .WithMany("Bids")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Core.User.Entities.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Core.HomeService.Entities.Request", "Request")
                        .WithMany("Comments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Core.HomeService.Entities.Service", "Service")
                        .WithMany("Comments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Request");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.ExpertSkill", b =>
                {
                    b.HasOne("Domain.Core.User.Entities.Expert", "Expert")
                        .WithMany("Skills")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Core.HomeService.Entities.Service", "Service")
                        .WithMany("Skills")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Request", b =>
                {
                    b.HasOne("Domain.Core.User.Entities.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Core.User.Entities.Expert", "Expert")
                        .WithMany("Requests")
                        .HasForeignKey("ExpertId");

                    b.HasOne("Domain.Core.HomeService.Entities.Service", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Service", b =>
                {
                    b.HasOne("Domain.Core.HomeService.Entities.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Status", b =>
                {
                    b.HasOne("Domain.Core.HomeService.Entities.Request", "Request")
                        .WithOne("Status")
                        .HasForeignKey("Domain.Core.HomeService.Entities.Status", "RequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Domain.Core.User.Entities.Admin", b =>
                {
                    b.HasOne("Domain.Core.User.Entities.AppUser", "AppUser")
                        .WithOne("Admin")
                        .HasForeignKey("Domain.Core.User.Entities.Admin", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.Core.User.Entities.Customer", b =>
                {
                    b.HasOne("Domain.Core.User.Entities.AppUser", "AppUser")
                        .WithOne("Customer")
                        .HasForeignKey("Domain.Core.User.Entities.Customer", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.Core.User.Entities.Expert", b =>
                {
                    b.HasOne("Domain.Core.User.Entities.AppUser", "AppUser")
                        .WithOne("Expert")
                        .HasForeignKey("Domain.Core.User.Entities.Expert", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Core.User.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Core.User.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Core.User.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Core.User.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Request", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Comments");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Core.HomeService.Entities.Service", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Requests");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Domain.Core.User.Entities.AppUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("Domain.Core.User.Entities.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Domain.Core.User.Entities.Expert", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Requests");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
